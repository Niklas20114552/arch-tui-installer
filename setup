#!/usr/bin/bash
function rootpw() {
	p1=$(dialog --no-cancel --title "$tit1" --passwordbox "$lan1" 10 45 3>&1 1>&2 2>&3 3>&-)
	c1=$(dialog --no-cancel --title "$tit1" --passwordbox "$lan2" 10 45 3>&1 1>&2 2>&3 3>&-)
	if [[ "$p1" == "$c1" ]]; then
		root_pass="$p1"
	else
		dialog --title "$tit1" --msgbox "$lan5" 5 40
		rootpw
	fi
}
function userpw() {
	p2=$(dialog --no-cancel --title "$tit2" --passwordbox "$lan3" 10 45 3>&1 1>&2 2>&3 3>&-)
	c2=$(dialog --no-cancel --title "$tit2" --passwordbox "$lan4" 11 45 3>&1 1>&2 2>&3 3>&-)
	if [[ "$p2" == "$c2" ]]; then
		user_pass="$p2"
	else
		dialog --title "$tit2" --msgbox "$lan5" 5 40
		userpw
	fi
}
if [[ ! -f /usr/bin/dialog ]]; then
	echo Please install: dialog
	exit
fi
mkdir -p /target
o4=$(dialog --no-cancel --title "Language" --menu "Please choose your language." 20 40 5 "de_DE.UTF-8" "Deutsch" "en_US.UTF-8" "English (US)" 3>&1 1>&2 2>&3 3>&-)
case $o4 in
de_DE.UTF-8) local="de_DE.UTF-8" && locale="de_DE.UTF-8 UTF-8" && slan=de ;;
en_US.UTF-8) local="en_US.UTF-8" && locale="en_US.UTF-8 UTF-8" && slan=en ;;
esac
if [[ ! -f /var/setup/lang.conf ]]; then
	curl -o /var/setup/lang.conf https://raw.githubusercontent.com/Niklas20114552/arch-tui-installer/main/lang.conf
fi
source /var/setup/lang.conf $slan
if [[ $1 == --debug ]]; then
	dialog --title "$mtit" --infobox "$err1" 3 26
	sleep 3
fi
dialog --title "$mtit" --extra-button --extra-label "$but1" --msgbox "$lan6" 7 45
if [[ $? == 3 ]]; then
	exit
fi
o1=$(dialog --no-cancel --title "$tit3" --menu "$lan7" 12 35 5 de_DE "Deutsch" de_CH "Deutsch (Schweiz)" 3>&1 1>&2 2>&3 3>&-)
case $o1 in
de_DE) keymap=de-latin1 && layout=de ;;
de_CH) keymap=de_CH-latin1 && layout=en ;;
de_CH) keymap=en && layout=ch ;;
esac
loadkeys $keymap
o2=$(dialog --no-cancel --title "$tit4" --menu "$lan8" 23 35 5 "Africa" "" "America" "" "Antarctica" "" "Arctic" "" "Asia" "" "Atlantic" "" "Australia" "" "Barzil" "" "Canada" "" "Chile" "" "Etc" "" "Europe" "" "Indian" "" "Mexico" "" "Pacific" "" "US" "" 3>&1 1>&2 2>&3 3>&-)
cd /usr/share/zoneinfo/$o2
tzone=$(echo *)
o3=$(dialog --no-cancel --no-items --title "$tit4" --menu "$lan8" 23 35 5 $tzone 3>&1 1>&2 2>&3 3>&-)
timezone=/usr/share/zoneinfo/$o2/$o3
o5=$(dialog --no-cancel --title "$tit5" --inputbox "$lan9" 13 55 3>&1 1>&2 2>&3 3>&-)
d1=$(find /dev/sd* -not -name '*[0-9]' | tr "\n" " ")
d2=$(find /dev/vd* -not -name '*[0-9]' | tr "\n" " ")
d3=$(find /dev/hd* -not -name '*[0-9]' | tr "\n" " ")
drives="$d1 $d2 $d3"
drives=$(echo $drives)
o6=$(dialog --no-cancel --no-items --title "$tit6" --menu "$lan10" 20 20 5 $drives 3>&1 1>&2 2>&3 3>&-)
boot_drive=$o6
if [[ -d /sys/firmware/efi ]]; then
	dialog --title "$tit7a $boot_drive" --msgbox "$lan11" 10 73
else
	dialog --title "$tit7a $boot_drive" --msgbox "$lan12" 8 60
fi
umount "$boot_drive"*
cfdisk $boot_drive
partition=$(find $boot_drive* -name '*[0-9]' | tr "\n" " ")
partition=$(echo $partition)
if [[ "$partition" == "" ]]; then
	partition=$(find "$boot_drive"* -name '*[0-9]' | tr "\n" " ")
	partition=$(echo $partition)
	if [[ "$partition" == "" ]]; then
		dialog --title "$err2" --msgbox "$err4a $boot_drive $err4b" 0 0
		exit
	fi
fi
if [[ -d /sys/firmware/efi ]]; then
	e1=$(dialog --no-cancel --no-items --title "$tit7b" --menu "$lan13" 20 34 5 $partition 3>&1 1>&2 2>&3 3>&-)
	dialog --title "$tit8 $e1" --yesno "$lan14" 0 0
	if [[ $? == 0 ]]; then
		yes | mkfs.vfat $e1
	fi
fi
o7=$(dialog --no-cancel --no-items --title "$tit7b" --menu "$lan17" 20 20 5 $partition 3>&1 1>&2 2>&3 3>&-)
dialog --title "$tit8 $o7" --default-button no --yesno "$lan18" 8 45
if [[ $? == 1 ]]; then
	dialog --title "$err3" --msgbox "$err5" 6 45
	exit
fi
yes | mkfs.ext4 $o7

dialog --title "$tit9" --yesno "$lan15" 5 45
if [[ $? == 0 ]]; then
	swap=yes
	o8=$(dialog --no-cancel --no-items --title "$tit7b" --menu "$lan16" 20 20 5 $partition 3>&1 1>&2 2>&3 3>&-)
	yes | mkswap $o8
fi
rootpw
user_name=$(dialog --no-cancel --title "$tit10" --inputbox "$lan19" 9 45 3>&1 1>&2 2>&3 3>&-)
userpw
dialog --title "$tit11" --no-label AMD --yes-label Nvidia --yesno "$lan20" 6 45
if [[ $? == 1 ]]; then
	gpu=xf86-video-amdgpu
else
	gpu="nvidia nvidia-utils nvidia-settings"
fi
dialog --title "$tit12" --no-label AMD --yes-label Intel --yesno "$lan21" 6 45
if [[ $? == 1 ]]; then
	cpu=amd-ucode
else
	cpu=intel-ucode
fi
dialog --title "AUR-Helper" --extra-button --no-label "$but2" --yes-label "Paru" --extra-label "Yay" --yesno "$lan22" 8 55
if [[ $? == 0 ]]; then
	aur=paru-bin
elif [[ $? == 3 ]]; then
	aur=yay-bin
fi 
dialog --title "$mtit" --msgbox "$lan23" 5 45
mount "$o7" /target
mkdir -p /target/boot/efi
mount "$e1" /target/boot/efi
pacman --noconfirm -Sy archlinux-keyring

pacstrap /target base linux linux-firmware git nano $cpu iptables-nft neovim
genfstab -U /target >> /target/etc/fstab

ln -sf $timezone /target/etc/localtime
mkdir -p /target/var/setup
arch-chroot bash -c "hwclock --systohc"
arch-chroot bash -c "timedatectl set-ntp true"
echo "$locale" > /target/etc/locale.gen
arch-chroot /target bash -c "locale-gen"
echo "LANG=$local" > /target/etc/locale.conf
echo "KEYMAP=$keymap" > /target/etc/vconsole.conf
echo "$layout" > /target/var/setup/layout.conf
echo $o5 > /target/etc/hostname
echo "127.0.0.1 localhost" >> /target/etc/hosts
echo "::1       localhost" >> /target/etc/hosts
echo "127.0.1.1 $hostname.local $hostname" >> /target/etc/hosts

if [[ -d /sys/firmware/efi ]]; then
	grub="grub efibootmgr"
else
	grub="grub"
fi
arch-chroot /target bash -c "pacman --needed --noconfirm -Sy $gpu $grub networkmanager network-manager-applet dialog wpa_supplicant mtools dosfstools reflector base-devel linux-headers avahi xdg-user-dirs xdg-utils gvfs gvfs-smb nfs-utils inetutils dnsutils bluez bluez-utils cups hplip alsa-utils pulseaudio bash-completion openssh rsync reflector acpi acpi_call tlp edk2-ovmf bridge-utils dnsmasq vde2 openbsd-netcat iptables-nft ipset firewalld flatpak sof-firmware nss-mdns acpid os-prober ntfs-3g terminus-font numlockx wget man-db neofetch cargo"
echo "echo 'root:$root_pass' | chpasswd" > /target/chpasswd.sh
sed -i "s/#GRUB_DISABLE_OS_PROBER=false/GRUB_DISABLE_OS_PROBER=false/" /target/etc/default/grub
if [[ -d /sys/firmware/efi ]]; then
	arch-chroot /target bash -c "grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB"
else
	arch-chroot /target bash -c "grub-install --target=i386-pc $boot_drive"
fi
arch-chroot /target bash -c "grub-mkconfig -o /boot/grub/grub.cfg"
arch-chroot /target bash -c "systemctl enable NetworkManager bluetooth cups.service avahi-daemon tlp reflector.timer fstrim.timer firewalld acpid"
arch-chroot /target bash -c "useradd -mG wheel $user_name"
echo "echo '$user_name:$user_pass' | chpasswd" >> /target/chpasswd.sh
arch-chroot /target bash /chpasswd.sh
rm -rf /target/chpasswd.sh
echo "%wheel ALL=(ALL:ALL) ALL" > /target/etc/sudoers.d/wheel
if [[ -f /var/setup/installed.conf ]]; then
	cp /var/setup/installed.conf /target/var/setup/lang.conf
else
	curl -o /var/setup/installed.conf https://raw.githubusercontent.com/Niklas20114552/arch-tui-installer/main/installed/lang.conf
fi
if [[ -f /var/setup/installer ]]; then
	cp /var/setup/installer /target/usr/bin/installer
else
	curl -o /target/usr/bin/installer https://raw.githubusercontent.com/Niklas20114552/arch-tui-installer/main/installed/installer
fi
chmod +x /target/usr/bin/installer
if [[ ! -f /target/usr/bin/installer ]]; then
	dialog --title "$err3" --infobox "$err6"
fi
if [[ -f /var/setup/sumkpkg ]]; then
	cp /var/setup/sumkpkg /target/var/setup/sumkpkg
else
	curl -o /target/var/setup/sumkpkg https://raw.githubusercontent.com/Niklas20114552/arch-tui-installer/main/sumkpkg
fi
chmod +x /target/var/setup/sumkpkg
if [[ ! -f /target/var/setup/sumkpkg ]]; then
	dialog --title "$err2" --infobox "$err7" 6 50
	exit
fi
if [ "$aur" == "paru-bin" ] || [ "$aur" == "yay-bin" ]; then
	git clone https://aur.archlinux.org/$aur.git /target/tmp_aur
	arch-chroot /target bash -c "(cd /tmp_aur && /var/setup/sumkpkg -si --noconfirm)"
	rm -rf /target/tmp_aur
fi
if [[ $swap == yes ]]; then
	arch-chroot /target bash -c "swapon '$o8'"
	echo "$o8 swap swap defaults  0 0" >> /target/etc/fstab
fi

if [[ $1 == --debug ]]; then
	echo DEBUG -- PAUSE -- PRESS ENTER
	read
fi
dialog --title "$mtit" --yesno "$lan24" 0 0
if [[ $? == 0 ]]; then
	umount -a
	reboot
else
	echo -e "$lan25"
fi
